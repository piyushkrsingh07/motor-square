import { NextResponse } from "next/server";

import { GoogleGenAI } from "@google/genai";

async function fileToBase64(file) {
  const bytes = await file.arrayBuffer();
  const buffer = Buffer.from(bytes);
  return buffer.toString("base64");
}



export async function POST(request){
   try{
      if(!process.env.GEMINI_API_KEY){
        throw new Error("Gemini Api is not configured")
      }
       const formData = await request.formData();
    const file = formData.get("file");
    console.log(file,"see pk file")

      if (!file || !file.type) {
      return NextResponse.json({ error: "Missing file data" }, { status: 400 });
    }
      const ai = new GoogleGenAI({
        apiKey:process.env.GEMINI_API_KEY
      });
       const base64Image=await fileToBase64(file)

      const contents = [
  {
    inlineData: {
      mimeType: file.type,
      data: base64Image
    },
  },
  { text:`  Analyze this car image and extract the following information:
      1. Make (manufacturer)
      2. Model
      3. Year (approximately)
      4. Color
      5. Body type (SUV, Sedan, Hatchback, etc.)
      6. Mileage
      7. Fuel type (your best guess)
      8. Transmission type (your best guess)
      9. Price (your best guess)
      9. Short Description as to be added to a car listing

      Format your response as a clean JSON object with these fields:
      {
        "make": "",
        "model": "",
        "year": 0000,
        "color": "",
        "price": "",
        "mileage": "",
        "bodyType": "",
        "fuelType": "",
        "transmission": "",
        "description": "",
        "confidence": 0.0
      }

      For confidence, provide a value between 0 and 1 representing how confident you are in your overall identification.
      Only respond with the JSON object, nothing else.
   ` },
];

const response = await ai.models.generateContent({
  model: "gemini-2.5-flash",
  contents: contents,
});

const text = response.candidates?.[0]?.content?.parts?.[0]?.text;

if (!text) {
  throw new Error("No text generated by Gemini");
}

   const cleanedText = text.replace(/```(?:json)?\n?/g, "").trim();

const carDetails=JSON.parse(cleanedText)

console.log(carDetails,"....")

 const requiredFields = [
        "make",
        "model",
        "year",
        "color",
        "bodyType",
        "price",
        "mileage",
        "fuelType",
        "transmission",
        "description",
        "confidence",
      ];
const carDetailKeys = Object.keys(carDetails);

const missingFields = requiredFields.filter(field => !carDetailKeys.includes(field));

if(missingFields.length>0){
    return NextResponse.json(
        { error: `Missing required fields: ${missingFields.join(", ")}` },
        { status: 400 }
      );
}


return NextResponse.json({
  success: true,
  carDetails
});


}catch(error){
console.error("Failed to parse AI response",error)


return NextResponse.json(
  { error: `Failed to generate AI response: ${error.message}` },
  { status: 401 }
);

}
}