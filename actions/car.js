import { auth } from "@clerk/nextjs/server";
import { GoogleGenAI } from "@google/genai";
import User from "@/app/model/user"
import { connect } from "@/lib/database";
import ImageKit from "imagekit";
import Car from "@/app/model/car";
import { connect } from "@/lib/database";




async function fileToBase64(file) {
  const bytes = await file.arrayBuffer();
  const buffer = Buffer.from(bytes);
  return buffer.toString("base64");
}

export async function processCarImageWithAI(file){
   try{
      if(!process.env.GEMINI_API_KEY){
        throw new Error("Gemini Api is not configured")
      }

      const ai = new GoogleGenAI({apiKey:process.env.GEMINI_API_KEY});
      const base64Image=await fileToBase64(file)

      const contents = [
  {
    inlineData: {
      mimeType: file.type,
      data: base64Image
    },
  },
  { text:`  Analyze this car image and extract the following information:
      1. Make (manufacturer)
      2. Model
      3. Year (approximately)
      4. Color
      5. Body type (SUV, Sedan, Hatchback, etc.)
      6. Mileage
      7. Fuel type (your best guess)
      8. Transmission type (your best guess)
      9. Price (your best guess)
      9. Short Description as to be added to a car listing

      Format your response as a clean JSON object with these fields:
      {
        "make": "",
        "model": "",
        "year": 0000,
        "color": "",
        "price": "",
        "mileage": "",
        "bodyType": "",
        "fuelType": "",
        "transmission": "",
        "description": "",
        "confidence": 0.0
      }

      For confidence, provide a value between 0 and 1 representing how confident you are in your overall identification.
      Only respond with the JSON object, nothing else.
   ` },
];

const response = await ai.models.generateContent({
  model: "gemini-2.5-flash",
  contents: contents,
});

const text = response.candidates?.[0]?.content?.parts?.[0]?.text;

if (!text) {
  throw new Error("No text generated by Gemini");
}

   const cleanedText = text.replace(/```(?:json)?\n?/g, "").trim();

try{
const carDetails=JSON.parse(cleanedText)

 const requiredFields = [
        "make",
        "model",
        "year",
        "color",
        "bodyType",
        "price",
        "mileage",
        "fuelType",
        "transmission",
        "description",
        "confidence",
      ];
const carDetailKeys = Object.keys(carDetails);

const missingFields = requiredFields.filter(field => !carDetailKeys.includes(field));

if(missingFields.length>0){
    throw new Error(
        `AI response missing required fields:${missingFields.join(",")}`
    )
}

return {
    success:"true",
    data:carDetails
}

}catch(error){
console.error("Failed to parse AI response",parseError)
return{
 success:false,
 error:"failed to parse AI response"
}
}
   }catch(error){
throw new Error("Gemini API error"+error.message)
   }
}


const imagekit = new ImageKit({
  publicKey: process.env.NEXT_PUBLIC_IMAGEKIT_PUBLIC_KEY ,
  privateKey: process.env.IMAGEKIT_PRIVATE_KEY, 
  urlEndpoint: process.env.NEXT_PUBLIC_IMAGEKIT_URL_ENDPOINT 
});

export async function addCar(formData){
 try{
    await connect()

 

      const files=formData.getAll("images");
      console.log(files,"file piyush")

      if(!files && files.length===0){
        return {
            error:"No Files Provided"
        }
      }
      const imageUrls=[]
    for(const file of files){
if(!file){
    return {error:"No file Provided"}
}
if(!file.type.startsWith("image/") ){
    return NextResponse.json({error:"Only images are allowed"})
}

const buffer=await file.arrayBuffer()
const fileBuffer=Buffer.from(buffer)

const originalFilename=file.name
console.log(originalFilename,"original")
const fileExtension=originalFilename.split(".").pop() || ""
console.log(fileExtension,"extension")
const uniqueFilename=`${uuidv4()}.${fileExtension}`
console.log(uniqueFilename,"unique")

const uploadedImage=await imagekit.upload({
    file:fileBuffer,
    fileName:uniqueFilename,
    uniqueFilename:false
})

    console.log("Image uploaded:", uploadedImage);

    imageUrls.push({
    fileId: uploadedImage.fileId,
    url: uploadedImage.url,
   })

     
    } 
 console.log(imageUrls,"see all urls");
    const data={}

    for(const [key,value] of formData.entries())
    {
        if(key==="year" || key==="seats"){
            data[key]=parseInt(value)
        } else if(key==="price"){
            data[key]=parseInt(value)
        }
        else if(key==="featured"){
            data[key]=value === "true"
        }
        else{
            data[key]=value
        }
          
    }

const { make, model, year, price, mileage, color, fuelType, transmission, bodyType, seats, description, status, featured } = data;

    const car=new Car({
        make,
        model,
        year,
        price,
        mileage,
        color,
        fuelType,
        transmission,
        bodyType,
        seats,
        description,
        status,
        featured,
       images:imageUrls
    })

    await car.save();





return {
   message:"All Data Uploaded Successfully",
   data:car
}

  }
  catch(error){

    console.error("Failed to upload images",error)
    
    
    return { error: `Failed to upload image ${error.message}` }
  }
    
  

}
